// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "get the status of server.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "root"
                ],
                "summary": "Show the status of server.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/vehicle/index-keys/{tokenId}": {
            "get": {
                "description": "Retrieves a list of index keys that match the provided search options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "objects"
                ],
                "summary": "Get multiple index keys based on search criteria",
                "parameters": [
                    {
                        "type": "string",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "producer",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns list of index keys",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_fetch_httphandler.cloudReturn"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/vehicle/latest-index-key/{tokenId}": {
            "get": {
                "description": "Retrieves the most recent index key that matches the provided search options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "objects"
                ],
                "summary": "Get the latest index key based on search criteria",
                "parameters": [
                    {
                        "type": "string",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "producer",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the latest index key",
                        "schema": {
                            "$ref": "#/definitions/internal_fetch_httphandler.cloudReturn"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/vehicle/latest-object/{tokenId}": {
            "get": {
                "description": "Retrieves the content of the most recent object that matches the provided search options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "objects"
                ],
                "summary": "Get the latest object based on search criteria",
                "parameters": [
                    {
                        "type": "string",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "producer",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns latest object data",
                        "schema": {
                            "$ref": "#/definitions/cloudevent.CloudEvent-json_RawMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/vehicle/objects/{tokenId}": {
            "get": {
                "description": "Retrieves the content of multiple objects that match the provided search options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "objects"
                ],
                "summary": "Get multiple objects based on search criteria",
                "parameters": [
                    {
                        "type": "string",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "producer",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns latest object data",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/cloudevent.CloudEvent-json_RawMessage"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "cloudevent.CloudEvent-json_RawMessage": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data contains domain-specific information about the event.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "datacontenttype": {
                    "description": "DataContentType is an optional MIME type for the data field. We almost\nalways serialize to JSON and in that case this field is implicitly\n\"application/json\".",
                    "type": "string"
                },
                "dataschema": {
                    "description": "DataSchema is an optional URI pointing to a schema for the data field.",
                    "type": "string"
                },
                "dataversion": {
                    "description": "DataVersion is the version of the data type.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is an identifier for the event. The combination of ID and Source must\nbe unique.",
                    "type": "string"
                },
                "producer": {
                    "description": "Producer is a specific instance, process or device that creates the data structure describing the CloudEvent.",
                    "type": "string"
                },
                "source": {
                    "description": "Source is the context in which the event happened. In a distributed system it might consist of multiple Producers.",
                    "type": "string"
                },
                "specversion": {
                    "description": "SpecVersion is the version of CloudEvents specification used.\nThis is always hardcoded \"1.0\".",
                    "type": "string"
                },
                "subject": {
                    "description": "Subject is an optional field identifying the subject of the event within\nthe context of the event producer. In practice, we always set this.",
                    "type": "string"
                },
                "time": {
                    "description": "Time is an optional field giving the time at which the event occurred. In\npractice, we always set this.",
                    "type": "string"
                },
                "type": {
                    "description": "Type describes the type of event. It should generally be a reverse-DNS\nname.",
                    "type": "string"
                }
            }
        },
        "eventrepo.ObjectInfo": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },
        "internal_fetch_httphandler.cloudReturn": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data contains domain-specific information about the event.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/eventrepo.ObjectInfo"
                        }
                    ]
                },
                "datacontenttype": {
                    "description": "DataContentType is an optional MIME type for the data field. We almost\nalways serialize to JSON and in that case this field is implicitly\n\"application/json\".",
                    "type": "string"
                },
                "dataschema": {
                    "description": "DataSchema is an optional URI pointing to a schema for the data field.",
                    "type": "string"
                },
                "dataversion": {
                    "description": "DataVersion is the version of the data type.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is an identifier for the event. The combination of ID and Source must\nbe unique.",
                    "type": "string"
                },
                "producer": {
                    "description": "Producer is a specific instance, process or device that creates the data structure describing the CloudEvent.",
                    "type": "string"
                },
                "source": {
                    "description": "Source is the context in which the event happened. In a distributed system it might consist of multiple Producers.",
                    "type": "string"
                },
                "specversion": {
                    "description": "SpecVersion is the version of CloudEvents specification used.\nThis is always hardcoded \"1.0\".",
                    "type": "string"
                },
                "subject": {
                    "description": "Subject is an optional field identifying the subject of the event within\nthe context of the event producer. In practice, we always set this.",
                    "type": "string"
                },
                "time": {
                    "description": "Time is an optional field giving the time at which the event occurred. In\npractice, we always set this.",
                    "type": "string"
                },
                "type": {
                    "description": "Type describes the type of event. It should generally be a reverse-DNS\nname.",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "DIMO Fetch API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
