// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/grpc/fetch-api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FetchService_GetLatestIndexKey_FullMethodName       = "/grpc.FetchService/GetLatestIndexKey"
	FetchService_GetIndexKeys_FullMethodName            = "/grpc.FetchService/GetIndexKeys"
	FetchService_GetLatestObject_FullMethodName         = "/grpc.FetchService/GetLatestObject"
	FetchService_GetObjects_FullMethodName              = "/grpc.FetchService/GetObjects"
	FetchService_GetObjectsFromIndexKeys_FullMethodName = "/grpc.FetchService/GetObjectsFromIndexKeys"
)

// FetchServiceClient is the client API for FetchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FetchService defines the gRPC service for fetching DIMO objects
type FetchServiceClient interface {
	// GetLatestIndexKey returns the latest index key for the given options
	GetLatestIndexKey(ctx context.Context, in *GetLatestIndexKeyRequest, opts ...grpc.CallOption) (*GetLatestIndexKeyResponse, error)
	// GetIndexKeys fetches and returns the list of index_keys that match the specified options
	GetIndexKeys(ctx context.Context, in *GetIndexKeysRequest, opts ...grpc.CallOption) (*GetIndexKeysResponse, error)
	// GetLatestObject fetches and returns the latest object that matches the specified options
	GetLatestObject(ctx context.Context, in *GetLatestObjectRequest, opts ...grpc.CallOption) (*GetLatestObjectResponse, error)
	// GetObjects fetches and returns the list of objects that match the specified options
	GetObjects(ctx context.Context, in *GetObjectsRequest, opts ...grpc.CallOption) (*GetObjectsResponse, error)
	// GetObjectsFromIndexKeys fetches and returns the list of objects that match the specified index key
	GetObjectsFromIndexKeys(ctx context.Context, in *GetObjectsFromIndexKeysRequest, opts ...grpc.CallOption) (*GetObjectsFromIndexKeysResponse, error)
}

type fetchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchServiceClient(cc grpc.ClientConnInterface) FetchServiceClient {
	return &fetchServiceClient{cc}
}

func (c *fetchServiceClient) GetLatestIndexKey(ctx context.Context, in *GetLatestIndexKeyRequest, opts ...grpc.CallOption) (*GetLatestIndexKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestIndexKeyResponse)
	err := c.cc.Invoke(ctx, FetchService_GetLatestIndexKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) GetIndexKeys(ctx context.Context, in *GetIndexKeysRequest, opts ...grpc.CallOption) (*GetIndexKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIndexKeysResponse)
	err := c.cc.Invoke(ctx, FetchService_GetIndexKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) GetLatestObject(ctx context.Context, in *GetLatestObjectRequest, opts ...grpc.CallOption) (*GetLatestObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestObjectResponse)
	err := c.cc.Invoke(ctx, FetchService_GetLatestObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) GetObjects(ctx context.Context, in *GetObjectsRequest, opts ...grpc.CallOption) (*GetObjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectsResponse)
	err := c.cc.Invoke(ctx, FetchService_GetObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) GetObjectsFromIndexKeys(ctx context.Context, in *GetObjectsFromIndexKeysRequest, opts ...grpc.CallOption) (*GetObjectsFromIndexKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectsFromIndexKeysResponse)
	err := c.cc.Invoke(ctx, FetchService_GetObjectsFromIndexKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FetchServiceServer is the server API for FetchService service.
// All implementations must embed UnimplementedFetchServiceServer
// for forward compatibility.
//
// FetchService defines the gRPC service for fetching DIMO objects
type FetchServiceServer interface {
	// GetLatestIndexKey returns the latest index key for the given options
	GetLatestIndexKey(context.Context, *GetLatestIndexKeyRequest) (*GetLatestIndexKeyResponse, error)
	// GetIndexKeys fetches and returns the list of index_keys that match the specified options
	GetIndexKeys(context.Context, *GetIndexKeysRequest) (*GetIndexKeysResponse, error)
	// GetLatestObject fetches and returns the latest object that matches the specified options
	GetLatestObject(context.Context, *GetLatestObjectRequest) (*GetLatestObjectResponse, error)
	// GetObjects fetches and returns the list of objects that match the specified options
	GetObjects(context.Context, *GetObjectsRequest) (*GetObjectsResponse, error)
	// GetObjectsFromIndexKeys fetches and returns the list of objects that match the specified index key
	GetObjectsFromIndexKeys(context.Context, *GetObjectsFromIndexKeysRequest) (*GetObjectsFromIndexKeysResponse, error)
	mustEmbedUnimplementedFetchServiceServer()
}

// UnimplementedFetchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFetchServiceServer struct{}

func (UnimplementedFetchServiceServer) GetLatestIndexKey(context.Context, *GetLatestIndexKeyRequest) (*GetLatestIndexKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestIndexKey not implemented")
}
func (UnimplementedFetchServiceServer) GetIndexKeys(context.Context, *GetIndexKeysRequest) (*GetIndexKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexKeys not implemented")
}
func (UnimplementedFetchServiceServer) GetLatestObject(context.Context, *GetLatestObjectRequest) (*GetLatestObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestObject not implemented")
}
func (UnimplementedFetchServiceServer) GetObjects(context.Context, *GetObjectsRequest) (*GetObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjects not implemented")
}
func (UnimplementedFetchServiceServer) GetObjectsFromIndexKeys(context.Context, *GetObjectsFromIndexKeysRequest) (*GetObjectsFromIndexKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsFromIndexKeys not implemented")
}
func (UnimplementedFetchServiceServer) mustEmbedUnimplementedFetchServiceServer() {}
func (UnimplementedFetchServiceServer) testEmbeddedByValue()                      {}

// UnsafeFetchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchServiceServer will
// result in compilation errors.
type UnsafeFetchServiceServer interface {
	mustEmbedUnimplementedFetchServiceServer()
}

func RegisterFetchServiceServer(s grpc.ServiceRegistrar, srv FetchServiceServer) {
	// If the following call pancis, it indicates UnimplementedFetchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FetchService_ServiceDesc, srv)
}

func _FetchService_GetLatestIndexKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestIndexKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetLatestIndexKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_GetLatestIndexKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetLatestIndexKey(ctx, req.(*GetLatestIndexKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_GetIndexKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetIndexKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_GetIndexKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetIndexKeys(ctx, req.(*GetIndexKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_GetLatestObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetLatestObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_GetLatestObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetLatestObject(ctx, req.(*GetLatestObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_GetObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_GetObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetObjects(ctx, req.(*GetObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_GetObjectsFromIndexKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectsFromIndexKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetObjectsFromIndexKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_GetObjectsFromIndexKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetObjectsFromIndexKeys(ctx, req.(*GetObjectsFromIndexKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FetchService_ServiceDesc is the grpc.ServiceDesc for FetchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FetchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.FetchService",
	HandlerType: (*FetchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestIndexKey",
			Handler:    _FetchService_GetLatestIndexKey_Handler,
		},
		{
			MethodName: "GetIndexKeys",
			Handler:    _FetchService_GetIndexKeys_Handler,
		},
		{
			MethodName: "GetLatestObject",
			Handler:    _FetchService_GetLatestObject_Handler,
		},
		{
			MethodName: "GetObjects",
			Handler:    _FetchService_GetObjects_Handler,
		},
		{
			MethodName: "GetObjectsFromIndexKeys",
			Handler:    _FetchService_GetObjectsFromIndexKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/fetch-api.proto",
}
