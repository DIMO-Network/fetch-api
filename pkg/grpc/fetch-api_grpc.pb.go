// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/grpc/fetch-api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FetchService_GetLatestMetadata_FullMethodName       = "/grpc.FetchService/GetLatestMetadata"
	FetchService_ListMetadata_FullMethodName            = "/grpc.FetchService/ListMetadata"
	FetchService_GetLatestCloudEvent_FullMethodName     = "/grpc.FetchService/GetLatestCloudEvent"
	FetchService_ListCloudEvents_FullMethodName         = "/grpc.FetchService/ListCloudEvents"
	FetchService_ListCloudEventsFromKeys_FullMethodName = "/grpc.FetchService/ListCloudEventsFromKeys"
)

// FetchServiceClient is the client API for FetchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FetchService defines the gRPC service for fetching DIMO objects
type FetchServiceClient interface {
	// GetLatestMetadatareturns the latest index key for the given options
	GetLatestMetadata(ctx context.Context, in *GetLatestMetadataRequest, opts ...grpc.CallOption) (*GetLatestMetadataResponse, error)
	// ListMetadata fetches and returns the list of cloud event metadata objects that match the specified options
	ListMetadata(ctx context.Context, in *ListMetadataRequest, opts ...grpc.CallOption) (*ListMetadataResponse, error)
	// GetLatestCloudEvent fetches and returns the latest object that matches the specified options
	GetLatestCloudEvent(ctx context.Context, in *GetLatestCloudEventRequest, opts ...grpc.CallOption) (*GetLatestCloudEventResponse, error)
	// ListCloudEvents fetches and returns the list of objects that match the specified options
	ListCloudEvents(ctx context.Context, in *ListCloudEventsRequest, opts ...grpc.CallOption) (*ListCloudEventsResponse, error)
	// ListCloudEventsFromKeys fetches and returns the list of objects that match the specified index key
	ListCloudEventsFromKeys(ctx context.Context, in *ListCloudEventsFromKeysRequest, opts ...grpc.CallOption) (*ListCloudEventsFromKeysResponse, error)
}

type fetchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchServiceClient(cc grpc.ClientConnInterface) FetchServiceClient {
	return &fetchServiceClient{cc}
}

func (c *fetchServiceClient) GetLatestMetadata(ctx context.Context, in *GetLatestMetadataRequest, opts ...grpc.CallOption) (*GetLatestMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestMetadataResponse)
	err := c.cc.Invoke(ctx, FetchService_GetLatestMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) ListMetadata(ctx context.Context, in *ListMetadataRequest, opts ...grpc.CallOption) (*ListMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMetadataResponse)
	err := c.cc.Invoke(ctx, FetchService_ListMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) GetLatestCloudEvent(ctx context.Context, in *GetLatestCloudEventRequest, opts ...grpc.CallOption) (*GetLatestCloudEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestCloudEventResponse)
	err := c.cc.Invoke(ctx, FetchService_GetLatestCloudEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) ListCloudEvents(ctx context.Context, in *ListCloudEventsRequest, opts ...grpc.CallOption) (*ListCloudEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCloudEventsResponse)
	err := c.cc.Invoke(ctx, FetchService_ListCloudEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) ListCloudEventsFromKeys(ctx context.Context, in *ListCloudEventsFromKeysRequest, opts ...grpc.CallOption) (*ListCloudEventsFromKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCloudEventsFromKeysResponse)
	err := c.cc.Invoke(ctx, FetchService_ListCloudEventsFromKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FetchServiceServer is the server API for FetchService service.
// All implementations must embed UnimplementedFetchServiceServer
// for forward compatibility.
//
// FetchService defines the gRPC service for fetching DIMO objects
type FetchServiceServer interface {
	// GetLatestMetadatareturns the latest index key for the given options
	GetLatestMetadata(context.Context, *GetLatestMetadataRequest) (*GetLatestMetadataResponse, error)
	// ListMetadata fetches and returns the list of cloud event metadata objects that match the specified options
	ListMetadata(context.Context, *ListMetadataRequest) (*ListMetadataResponse, error)
	// GetLatestCloudEvent fetches and returns the latest object that matches the specified options
	GetLatestCloudEvent(context.Context, *GetLatestCloudEventRequest) (*GetLatestCloudEventResponse, error)
	// ListCloudEvents fetches and returns the list of objects that match the specified options
	ListCloudEvents(context.Context, *ListCloudEventsRequest) (*ListCloudEventsResponse, error)
	// ListCloudEventsFromKeys fetches and returns the list of objects that match the specified index key
	ListCloudEventsFromKeys(context.Context, *ListCloudEventsFromKeysRequest) (*ListCloudEventsFromKeysResponse, error)
	mustEmbedUnimplementedFetchServiceServer()
}

// UnimplementedFetchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFetchServiceServer struct{}

func (UnimplementedFetchServiceServer) GetLatestMetadata(context.Context, *GetLatestMetadataRequest) (*GetLatestMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestMetadata not implemented")
}
func (UnimplementedFetchServiceServer) ListMetadata(context.Context, *ListMetadataRequest) (*ListMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetadata not implemented")
}
func (UnimplementedFetchServiceServer) GetLatestCloudEvent(context.Context, *GetLatestCloudEventRequest) (*GetLatestCloudEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestCloudEvent not implemented")
}
func (UnimplementedFetchServiceServer) ListCloudEvents(context.Context, *ListCloudEventsRequest) (*ListCloudEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudEvents not implemented")
}
func (UnimplementedFetchServiceServer) ListCloudEventsFromKeys(context.Context, *ListCloudEventsFromKeysRequest) (*ListCloudEventsFromKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudEventsFromKeys not implemented")
}
func (UnimplementedFetchServiceServer) mustEmbedUnimplementedFetchServiceServer() {}
func (UnimplementedFetchServiceServer) testEmbeddedByValue()                      {}

// UnsafeFetchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchServiceServer will
// result in compilation errors.
type UnsafeFetchServiceServer interface {
	mustEmbedUnimplementedFetchServiceServer()
}

func RegisterFetchServiceServer(s grpc.ServiceRegistrar, srv FetchServiceServer) {
	// If the following call pancis, it indicates UnimplementedFetchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FetchService_ServiceDesc, srv)
}

func _FetchService_GetLatestMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetLatestMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_GetLatestMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetLatestMetadata(ctx, req.(*GetLatestMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_ListMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).ListMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_ListMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).ListMetadata(ctx, req.(*ListMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_GetLatestCloudEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestCloudEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetLatestCloudEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_GetLatestCloudEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetLatestCloudEvent(ctx, req.(*GetLatestCloudEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_ListCloudEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).ListCloudEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_ListCloudEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).ListCloudEvents(ctx, req.(*ListCloudEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_ListCloudEventsFromKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudEventsFromKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).ListCloudEventsFromKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_ListCloudEventsFromKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).ListCloudEventsFromKeys(ctx, req.(*ListCloudEventsFromKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FetchService_ServiceDesc is the grpc.ServiceDesc for FetchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FetchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.FetchService",
	HandlerType: (*FetchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestMetadata",
			Handler:    _FetchService_GetLatestMetadata_Handler,
		},
		{
			MethodName: "ListMetadata",
			Handler:    _FetchService_ListMetadata_Handler,
		},
		{
			MethodName: "GetLatestCloudEvent",
			Handler:    _FetchService_GetLatestCloudEvent_Handler,
		},
		{
			MethodName: "ListCloudEvents",
			Handler:    _FetchService_ListCloudEvents_Handler,
		},
		{
			MethodName: "ListCloudEventsFromKeys",
			Handler:    _FetchService_ListCloudEventsFromKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/fetch-api.proto",
}
