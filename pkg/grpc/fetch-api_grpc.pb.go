// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/grpc/fetch-api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FetchService_GetLatestFileName_FullMethodName = "/grpc.FetchService/GetLatestFileName"
	FetchService_GetFileNames_FullMethodName      = "/grpc.FetchService/GetFileNames"
	FetchService_GetLatestFile_FullMethodName     = "/grpc.FetchService/GetLatestFile"
	FetchService_GetFiles_FullMethodName          = "/grpc.FetchService/GetFiles"
)

// FetchServiceClient is the client API for FetchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FetchService defines the gRPC service for fetching DIMO files
type FetchServiceClient interface {
	// GetLatestFileName returns the latest filename for the given options
	GetLatestFileName(ctx context.Context, in *GetLatestFileNameRequest, opts ...grpc.CallOption) (*GetLatestFileNameResponse, error)
	// GetFileNames fetches and returns the list of filenames that match the specified options,
	GetFileNames(ctx context.Context, in *GetFileNamesRequest, opts ...grpc.CallOption) (*GetFileNamesResponse, error)
	// GetLatestData fetches and returns the latest file that matches the specified options
	GetLatestFile(ctx context.Context, in *GetLatestFileRequest, opts ...grpc.CallOption) (*GetLatestFileResponse, error)
	// GetFiles fetches and returns the list of files that match the specified options
	GetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (*GetFilesResponse, error)
}

type fetchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchServiceClient(cc grpc.ClientConnInterface) FetchServiceClient {
	return &fetchServiceClient{cc}
}

func (c *fetchServiceClient) GetLatestFileName(ctx context.Context, in *GetLatestFileNameRequest, opts ...grpc.CallOption) (*GetLatestFileNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestFileNameResponse)
	err := c.cc.Invoke(ctx, FetchService_GetLatestFileName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) GetFileNames(ctx context.Context, in *GetFileNamesRequest, opts ...grpc.CallOption) (*GetFileNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileNamesResponse)
	err := c.cc.Invoke(ctx, FetchService_GetFileNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) GetLatestFile(ctx context.Context, in *GetLatestFileRequest, opts ...grpc.CallOption) (*GetLatestFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestFileResponse)
	err := c.cc.Invoke(ctx, FetchService_GetLatestFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) GetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (*GetFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilesResponse)
	err := c.cc.Invoke(ctx, FetchService_GetFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FetchServiceServer is the server API for FetchService service.
// All implementations must embed UnimplementedFetchServiceServer
// for forward compatibility.
//
// FetchService defines the gRPC service for fetching DIMO files
type FetchServiceServer interface {
	// GetLatestFileName returns the latest filename for the given options
	GetLatestFileName(context.Context, *GetLatestFileNameRequest) (*GetLatestFileNameResponse, error)
	// GetFileNames fetches and returns the list of filenames that match the specified options,
	GetFileNames(context.Context, *GetFileNamesRequest) (*GetFileNamesResponse, error)
	// GetLatestData fetches and returns the latest file that matches the specified options
	GetLatestFile(context.Context, *GetLatestFileRequest) (*GetLatestFileResponse, error)
	// GetFiles fetches and returns the list of files that match the specified options
	GetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error)
	mustEmbedUnimplementedFetchServiceServer()
}

// UnimplementedFetchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFetchServiceServer struct{}

func (UnimplementedFetchServiceServer) GetLatestFileName(context.Context, *GetLatestFileNameRequest) (*GetLatestFileNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestFileName not implemented")
}
func (UnimplementedFetchServiceServer) GetFileNames(context.Context, *GetFileNamesRequest) (*GetFileNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileNames not implemented")
}
func (UnimplementedFetchServiceServer) GetLatestFile(context.Context, *GetLatestFileRequest) (*GetLatestFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestFile not implemented")
}
func (UnimplementedFetchServiceServer) GetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedFetchServiceServer) mustEmbedUnimplementedFetchServiceServer() {}
func (UnimplementedFetchServiceServer) testEmbeddedByValue()                      {}

// UnsafeFetchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchServiceServer will
// result in compilation errors.
type UnsafeFetchServiceServer interface {
	mustEmbedUnimplementedFetchServiceServer()
}

func RegisterFetchServiceServer(s grpc.ServiceRegistrar, srv FetchServiceServer) {
	// If the following call pancis, it indicates UnimplementedFetchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FetchService_ServiceDesc, srv)
}

func _FetchService_GetLatestFileName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestFileNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetLatestFileName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_GetLatestFileName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetLatestFileName(ctx, req.(*GetLatestFileNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_GetFileNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetFileNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_GetFileNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetFileNames(ctx, req.(*GetFileNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_GetLatestFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetLatestFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_GetLatestFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetLatestFile(ctx, req.(*GetLatestFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FetchService_GetFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetFiles(ctx, req.(*GetFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FetchService_ServiceDesc is the grpc.ServiceDesc for FetchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FetchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.FetchService",
	HandlerType: (*FetchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestFileName",
			Handler:    _FetchService_GetLatestFileName_Handler,
		},
		{
			MethodName: "GetFileNames",
			Handler:    _FetchService_GetFileNames_Handler,
		},
		{
			MethodName: "GetLatestFile",
			Handler:    _FetchService_GetLatestFile_Handler,
		},
		{
			MethodName: "GetFiles",
			Handler:    _FetchService_GetFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/fetch-api.proto",
}
